// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("POSTGRES_DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Document {
    id String @id @default(cuid())
    sourceDocumentId String
    sourceId String 
    source Source  @relation(fields: [sourceId], references: [id])
    name String
    type String
    url String 
    sponsored Boolean?
    description String?
    imageId String
    image Image  @relation(fields: [imageId], references: [id])
    @@unique([sourceDocumentId,sourceId])
}
model Image {
    id            String    @id @default(cuid())
    name String
    photographerId String
    photographer Photographer @relation(fields: [photographerId], references: [id])
    url String @unique
    documents Document[]
}
model Photographer{
    id            String    @id @default(cuid())
    name String
    images Image []
}
model Source {
    id String @id @default(cuid())
    name String
    url String?
    slug String @unique
    documents Document[]
}
// enum not supported by sqllite
//enum ArticleType {
//  ARTICLE
//  RECIPE
//}